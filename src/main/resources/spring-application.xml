<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.jobplus">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
		<property name="fileEncoding">
	      <value>UTF-8</value>
	    </property>
	</bean>
	
	<mvc:resources mapping="/*.txt" location="/" />

	<bean id="dataSource" class="com.jobplus.utils.JobplusBasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		
		<property name="validationQuery" value="SELECT 1" />
		
    	<property name="testOnBorrow" value="true"/>
	</bean>

	<!-- spring和MyBatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/jobplus/mapping/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jobplus.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- redis配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
	</bean>
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="enableTransactionSupport" value="true"/><!-- 配置true可以使用transactional控制事务，spring已经提供支持 -->
        <property name="KeySerializer"> 
          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean> 
     	</property> 
     	<property name="ValueSerializer"> 
          <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"></bean> 
      	</property>  
	</bean>
	<!-- redis配置end -->

	<!-- shiro配置 -->


	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jobplusRealm" />
	</bean>

	<!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 调用我们配置的权限管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置我们的登录请求地址 -->
		<property name="loginUrl" value="/login.html" />
		<!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->
		<property name="successUrl" value="/index.html" />
		<!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->
		<property name="unauthorizedUrl" value="/error/403" />
		<!-- 权限配置 --><!-- /** = authc -->
		<property name="filterChainDefinitions">
			<value>
				/css/** = anon
				/image/** = anon
				/scripts/** = anon
				/uedit/** = anon
				/index = anon
				/index/** = anon
				/**.html = anon
				/login = anon
				/registration.html = anon
				/favicon.ico = anon
				/user/reg = anon
				/user/changePassword = anon
				/user/check/** = anon
				/ = anon
				/**.txt = anon
				/searchresult.html = anon
				/TopicShareDetail.html = anon
				/TopicShare.html = anon
				/topics/imageUp = anon
				/*/fore/** = anon
				/*/*Detail** = anon
				/myCenter/getCurrentUser = anon
				/myCenter/getUserSimpleInformation = anon
				/*/loadComments = anon
				/*/getPartTopicsComment = anon
				/*/getSortTopicsCommentsByTopicId = anon
				/myHome/getHomePage = anon
				/myHome/getOneShares = anon
				/myCenter/getMyAttenMan = anon
				/myCenter/getMyFans = anon
				/search/** = anon
				/mobilesms/** = anon
				/authorize/** = anon
				/about/** = anon
				/error/** = anon
				/manage/login = anon
				/manage/backstage/** = roles[admin]
				/manage/avatars/** = anon
				/manage/css/** = anon
				/manage/font/** = anon
				/manage/img/** = anon
				/manage/js/** = anon
				/suggestion/add = anon
				/knowledgeBaseIndex = anon
				/** = authc
			</value>
		</property>
	</bean>
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- shiro配置  end-->

	<!--定时任务Enables the Spring Task-->
	<task:executor id="executor" pool-size="1"/>
	<task:scheduler id="scheduler" pool-size="1"/>
	<task:annotation-driven executor="executor" scheduler="scheduler"/>
</beans>