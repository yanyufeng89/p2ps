<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE log4j:configuration SYSTEM "./log4j.dtd">
<!-- 

(1). 输出方式appender一般有5种：

             org.apache.log4j.RollingFileAppender(滚动文件，自动记录最新日志)
             org.apache.log4j.ConsoleAppender (控制台)  
             org.apache.log4j.FileAppender (文件)
             org.apache.log4j.DailyRollingFileAppender (每天产生一个日志文件)
             org.apache.log4j.WriterAppender (将日志信息以流格式发送到任意指定的地方)

 

(2). 日记记录的优先级priority，优先级由高到低分为 
            OFF ,FATAL ,ERROR ,WARN ,INFO ,DEBUG ,ALL。
            Log4j建议只使用FATAL ,ERROR ,WARN ,INFO ,DEBUG这五个级别。

 

(3). 格式说明layout中的参数都以%开始，后面不同的参数代表不同的格式化信息（参数按字母表顺序列出）：
                %c      输出所属类的全名，可在修改为 %d{Num} ,Num类名输出的维（如："org.apache.elathen.ClassName",%C{2}将输出elathen.ClassName）
                %d      输出日志时间其格式为 %d{yyyy-MM-dd HH:mm:ss,SSS}，可指定格式 如 %d{HH:mm:ss}
                %l      输出日志事件发生位置，包括类目名、发生线程，在代码中的行数
                %n      换行符
                %m      输出代码指定信息，如info(“message”),输出message
                %p      输出优先级，即 FATAL ,ERROR 等
                %r      输出从启动到显示该log信息所耗费的毫秒数
                %t      输出产生该日志事件的线程名


	
	[BUSINESS] 记录和跟踪业务逻辑执行过程
	
	[PERFORMANCE] 记录和跟踪代码执行情况
	
	[SECURITY] 记录外部对系统进行的各项操作
	
-->
<!-- Log4j.xml实现监听，配置完一分钟后生效 -->
<log4j:configuration debug="false"
	xmlns:log4j="http://jakarta.apache.org/log4j/">
	<!-- 控制台输出 -->
	<appender name="Console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="%d{ISO8601} %-5p %m%n" />
		</layout>
		<!--过滤器设置输出的级别--> 
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<param name="LevelMin" value="INFO" />
			<param name="LevelMax" value="FATAL" />
		</filter>
		<!-- 过滤器，当AcceptOnMatch设置为“false”时，可以把日志包含有“[SECURITY]”的信息过滤掉-->
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[SECURITY]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>
		<!-- 过滤器，当AcceptOnMatch设置为“false”时，可以把日志包含有“[BUSINESS]”的信息过滤掉-->
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[BUSINESS]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>
		<!-- 过滤器，当AcceptOnMatch设置为“false”时，可以把日志包含有“[PERFORMANCE]”的信息过滤掉-->
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[PERFORMANCE]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>

		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[SYSTEM]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>
	</appender>

	<appender name="consoleFile"
		class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File"
			value="${catalina.home}/logs/jobplus_console.log" />
		<param name="DatePattern" value="'_'yyyy-MM-dd'.log'" />
		<param name="Append" value="true" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="%d{ISO8601} %-5p %m%n" />
		</layout>
		
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<param name="LevelMin" value="INFO" />
			<param name="LevelMax" value="FATAL" />
		</filter>
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[SECURITY]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[BUSINESS]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[PERFORMANCE]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>

		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="[SYSTEM]" />
			<param name="AcceptOnMatch" value="true" />
		</filter>
	</appender>
	
	<!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制-->
	
	<!-- 第一种用法，定义一个日志器，在使用的地方，通过Logger.getLogger("business")获取-->
	<logger name="consoleFile" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>
	
	<!-- 第二种用法，直为某个类或者包指定一个logger的设置，name属性为类的全路径-->
	<logger name="com.jobplus" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>
	
	<!-- Mybatis and SQL -->
	<logger name="org.apache.ibatis" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>

	<logger name="org.mybatis.spring" additivity="true">
		<level value="ERROR" />
		<appender-ref ref="consoleFile" />
	</logger>
	<logger name="java.sql" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>

	<logger name="java.sql.Connection" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>

	<logger name="java.sql.Statement" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>

	<logger name="java.sql.PreparedStatement" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>

	<!-- Spring        -->
	<logger name="org.springframework" additivity="true">
		<level value="INFO" />
		<appender-ref ref="consoleFile" />
	</logger>
	
	
	
	<!-- 根据需要设置日志输出 -->
	<root>
		<priority value="INFO" />
		<appender-ref ref="Console" />
	</root>
</log4j:configuration>